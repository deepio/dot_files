#!/bin/sh
function cleanmeta() {
  xattr -c * && exiftool -all= * && rm *_original
}

function cleanpip() {
  pip freeze | xargs pip uninstall -y
}

function http2ssh() {
  REPO_URL=`git remote -v |  awk '{print $2; exit}'`;
  GIT_USER=${REPO_URL#*com/}; GIT_USER=${GIT_USER%%/*}
  GIT_REPO=${REPO_URL#*${GIT_USER}/}; GIT_REPO=${GIT_REPO%%.git*}

  if [ -z "$REPO_URL" ]; then
    echo "-- ERROR:  Could not identify Repo url."
    echo "   It is possible this repo is already using SSH instead of HTTPS."
    return 1
  fi

  if [ -z "$GIT_USER" ]; then
    echo "-- ERROR:  Could not identify User."
    return 1
  fi

  if [ -z "$GIT_REPO" ]; then
    echo "-- ERROR:  Could not identify Repo."
    return 1
  fi

  NEW_URL="git@github.com:$GIT_USER/$GIT_REPO.git"
  echo "Changing repo url from"
  echo "  '$REPO_URL'"
  echo "      to "
  echo "  '$NEW_URL'"
  echo ""

  git remote set-url origin `echo $NEW_URL`

  echo "Success"
}

function kali() {
  docker run --rm -v "$PWD:/pwd" --privileged -it d33pi0/kali:nightly
}

function killdocker() {
  echo 'This is the Docker Master Obliterator ;)'
  {
    docker stop --time 1 $(docker ps -aq)
    docker rm --force $(docker ps -aq)
    docker rmi --force $(docker image ls -q)
    docker volume rm --force $(docker volume ls -q)
    docker network rm $(docker network ls -q)
  } &> /dev/null
  echo 'Done.'
}

function pidof() {
  ps -A | grep -i "$@" | awk '{print $1}'
}

function runpy() {
  # Phasing out run in favor of entr.
  # EG:
  #   ls *.go | entr sh -c "go build; ./nanny"
  ag -g py$ | entr -c python "$@"
}

function rungo() {
  ag -g go$ | entr -c go run "$@"
}

function startdt() {
  bash --login '/Applications/Docker/Docker Quickstart Terminal.app/Contents/Resources/Scripts/start.sh'
}

function pomodoro() {
  # meh, better than googling/installing a some free app from some place.
  while true; do say "Beep Boop, start working"; sleep 1500; say "Boop, Take a break"; sleep 300; done
}

function createpy() {
  poetry new "$@"
  cd "$@"
  python3 -m venv env
  source env/bin/activate

  # Remove the email address from the toml file.
  gsed -Ei "s/( <[a-zA-Z0-9.@_\-]+>)//" ./pyproject.toml
  pip install poetry
  poetry add --dev sphinx 
  poetry add --dev git+https://github.com/crossnox/m2r@dev
  poetry add --dev coverage

  mkdir docs/
  cd docs/

  sphinx-quickstart  \
    --no-sep \
    -p "$@" \
    -a deepio \
    -r 0.0.1 \
    -l en

  # # Remove the old extensions... ?
  # gsed -i "s/extensions\ \=\ \[//" ./conf.py 
  # gsed -Ei "s/^]$//" ./conf.py 

  # Using this method because it's more transparent, allowing others to read what's going on.
  echo "" >> ./conf.py
  echo "" >> ./conf.py
  echo "" >> ./conf.py
  echo "# -- Custom Options -------------------------------------------------" >> ./conf.py
  echo "" >> ./conf.py
  echo "import os" >> ./conf.py
  echo "import subprocess" >> ./conf.py
  echo "if os.environ.get('READTHEDOCS') == 'True':" >> ./conf.py
  echo "  subprocess.check_output(['pip', 'install', 'm2r'])" >> ./conf.py
  echo "" >> ./conf.py
  echo "extensions = extensions + ['m2r', 'sphinx.ext.autodoc']" >> ./conf.py
  echo "autosectionlabel_prefix_document = True" >> ./conf.py
  echo "source_suffix = ['.md', '.rst']" >> ./conf.py
  mv index.rst index.md

  # RESET if you need it 
  # rm -rf _* conf.py index.rst index.md make.bat Makefile
	
	cd ..
  mv README.rst README.md
	
  # Travel back.
  cd ..
}
